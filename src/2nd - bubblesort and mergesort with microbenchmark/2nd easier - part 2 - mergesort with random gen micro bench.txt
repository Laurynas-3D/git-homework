import java.util.Random;

// import java.util.*;

public class test 
{
	 public static void main(String args[]) {
	        //int[] testArr = {96, 26, 9, 24, 4, 76, 44, 78, 100, 80, 4, 23, 78, 72, 93, 67, 69, 75, 51, 67, 41, 20, 66, 14, 59, 87, 44, 12, 86, 52, 62, 95, 90, 83, 51, 54, 68, 50, 24, 37, 16, 19, 71, 73, 79, 23, 97, 34, 89, 17, 21, 25, 47, 8, 71, 94, 45, 87, 86, 26, 97, 60, 79, 75, 17, 51, 41, 75, 6, 72, 7, 43, 5, 51, 1, 38, 10, 64, 26, 57, 56, 57, 59, 17, 90, 47, 48, 47, 77, 44, 3, 71, 75, 9, 32, 42, 98, 52, 10, 58};
	        
		 	Random generator = new Random();

	        int[] testArr = new int[1000];
	        for(int i=0; i<testArr.length; i++)
	        {
	        	testArr[i] = generator.nextInt(9999);
	        }
	        
	        int fibRes;
	        int input = 10;
	        long startTime = System.nanoTime();
	        //----------------------------------------
	        mergeSort(testArr);
	        for(int i = 0; i < testArr.length; i++){
	            System.out.print(testArr[i] + " ");
	            
	        }
	        
	      //--------------------------------------
	        long endTime = System.nanoTime();
	        System.out.println("\n\nMicrobenchmark new test:(" + input + ") call took: " + (endTime - startTime) + "ns");
	    }
	    

	    
	    static void mergeSort(int[] arr){
	        int aLen = arr.length;
	        if(aLen < 2){
	            return;
	        }
	            
	        int mid = aLen / 2;
	        int[] left = new int[mid];
	        int[] right = new int[aLen - mid];
	        
	        for(int i = 0; i <= mid - 1; i++)
	            left[i] = arr[i];
	        
	        for(int i = mid; i <= aLen - 1; i++)
	            right[i - mid] = arr[i];

	        
	        
	        mergeSort(left);
	        mergeSort(right);
	        merge(arr, left, right);
	        
	    }
	    
	    static void merge(int[] origArr, int[] arrL, int[] arrR){
	        int sizeLeft = arrL.length;
	        int sizeRight= arrR.length;
	        int i = 0, j = 0, k = 0;
	        while(i < sizeLeft && j < sizeRight){
	            if(arrL[i] <= arrR[j]){
	                origArr[k] = arrL[i];
	                i++;
	            } else{
	                origArr[k] = arrR[j];
	                j++;
	            }
	            k++;
	        }
	        while(i < sizeLeft){
	            origArr[k] = arrL[i]; i++; k++;
	        }
	        while(j < sizeRight){
	            origArr[k] = arrR[j]; j++; k++;
	        }
	    }
	    
	         // 1st. micro-benching
//	        int fibRes;
//	        int input = 10;
//	        long startTime = System.nanoTime();
//	        fibRes = ;
//	        long endTime = System.nanoTime();
//	        System.out.println("\n\nMicrobenchmark(" + input + ") call took: " + (endTime - startTime) + "ns");
//	        
	}
